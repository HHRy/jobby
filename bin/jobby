#!/usr/bin/env ruby
# Copyright (C) 2008  Mark Somerville
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

require 'logger'
require 'optparse'
require 'etc'
require "#{File.dirname(__FILE__)}/../lib/server"
require "#{File.dirname(__FILE__)}/../lib/client"
require "#{File.dirname(__FILE__)}/../lib/runner"

$0 = "jobby" # set the process name

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: jobby [options]"

  opts.on("-v", "--[no-]verbose", "Run verbosely") do |verbose|
    options[:verbose] = verbose
  end

  opts.on("-h", "--help", "Show this message") do
    puts opts
    exit
  end

  opts.on("--version", "Show version") do
    puts "%%%VERSION%%%"
    exit
  end

  opts.on("-s", "--socket [SOCKETFILE]", "Connect to this UNIX socket") do |socket|
    options[:socket] = socket
  end

  opts.on("-i", "--input [INPUT]", "Pass this string to the child process (can be used instead of STDIN)") do |input|
    options[:input] = input
  end

  opts.on("-f", "--flush", "Shutdown the server on the socket specified by --socket") do |flush|
    options[:flush] = flush
  end

  opts.on("-w", "--wipe", "Shutdown the server and terminate the children immediately on the socket specified by --socket") do |wipe|
    options[:wipe] = wipe
  end

  opts.separator ""
  opts.separator "Server options:"

  opts.on("-l", "--log [LOGFILE]", "Log to this file") do |logfile|
    options[:log] = logfile
  end

  opts.on("-m", "--max-children [MAXCHILDREN]", "Run MAXCHILDREN forked processes at any one time") do |forked_children|
    options[:max_child_processes] = forked_children.to_i
  end

  opts.on("-u", "--user [USER]", "Run the processes as this user (probably requires superuser priviledges)") do |user|
    options[:user] = user
  end

  opts.on("-g", "--group [GROUP]", "Run the processes as this group (probably requires superuser priviledges)") do |group|
    options[:group] = group
  end

  opts.on("-r", "--ruby [RUBY]", "Run this Ruby code in the forked children") do |ruby|
    options[:ruby] = ruby
  end

  opts.on("-c", "--command [COMMAND]", "Run this shell code in the forked children") do |command|
    options[:command] = command
  end
end.parse!

Jobby::Runner.new(options).run
